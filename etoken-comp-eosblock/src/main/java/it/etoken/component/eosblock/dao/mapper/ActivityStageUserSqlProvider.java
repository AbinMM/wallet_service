package it.etoken.component.eosblock.dao.mapper;

import it.etoken.base.model.eosblock.entity.ActivityStageUser;
import it.etoken.base.model.eosblock.entity.ActivityStageUserExample.Criteria;
import it.etoken.base.model.eosblock.entity.ActivityStageUserExample.Criterion;
import it.etoken.base.model.eosblock.entity.ActivityStageUserExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class ActivityStageUserSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	public String countByExample(ActivityStageUserExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("activity_stage_user");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	public String deleteByExample(ActivityStageUserExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("activity_stage_user");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	public String insertSelective(ActivityStageUser record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("activity_stage_user");
		if (record.getId() != null) {
			sql.VALUES("id", "#{id,jdbcType=BIGINT}");
		}
		if (record.getActivityId() != null) {
			sql.VALUES("activity_id", "#{activityId,jdbcType=BIGINT}");
		}
		if (record.getActivityStageId() != null) {
			sql.VALUES("activity_stage_id", "#{activityStageId,jdbcType=BIGINT}");
		}
		if (record.getStatus() != null) {
			sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
		}
		if (record.getAccountName() != null) {
			sql.VALUES("account_name", "#{accountName,jdbcType=VARCHAR}");
		}
		if (record.getIsWinner() != null) {
			sql.VALUES("is_winner", "#{isWinner,jdbcType=VARCHAR}");
		}
		if (record.getIsLucky() != null) {
			sql.VALUES("is_lucky", "#{isLucky,jdbcType=VARCHAR}");
		}
		if (record.getTrxId() != null) {
			sql.VALUES("trx_id", "#{trxId,jdbcType=VARCHAR}");
		}
		if (record.getTradeQty() != null) {
			sql.VALUES("trade_qty", "#{tradeQty,jdbcType=DECIMAL}");
		}
		if (record.getTradeDate() != null) {
			sql.VALUES("trade_date", "#{tradeDate,jdbcType=TIMESTAMP}");
		}
		if (record.getWinQty() != null) {
			sql.VALUES("win_qty", "#{winQty,jdbcType=DECIMAL}");
		}
		if (record.getLuckyQty() != null) {
			sql.VALUES("lucky_qty", "#{luckyQty,jdbcType=DECIMAL}");
		}
		if (record.getCreateDate() != null) {
			sql.VALUES("create_date", "#{createDate,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateDate() != null) {
			sql.VALUES("update_date", "#{updateDate,jdbcType=TIMESTAMP}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	public String selectByExample(ActivityStageUserExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("activity_id");
		sql.SELECT("activity_stage_id");
		sql.SELECT("status");
		sql.SELECT("account_name");
		sql.SELECT("is_winner");
		sql.SELECT("is_lucky");
		sql.SELECT("trx_id");
		sql.SELECT("trade_qty");
		sql.SELECT("trade_date");
		sql.SELECT("win_qty");
		sql.SELECT("lucky_qty");
		sql.SELECT("create_date");
		sql.SELECT("update_date");
		sql.FROM("activity_stage_user");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		ActivityStageUser record = (ActivityStageUser) parameter.get("record");
		ActivityStageUserExample example = (ActivityStageUserExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("activity_stage_user");
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=BIGINT}");
		}
		if (record.getActivityId() != null) {
			sql.SET("activity_id = #{record.activityId,jdbcType=BIGINT}");
		}
		if (record.getActivityStageId() != null) {
			sql.SET("activity_stage_id = #{record.activityStageId,jdbcType=BIGINT}");
		}
		if (record.getStatus() != null) {
			sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		}
		if (record.getAccountName() != null) {
			sql.SET("account_name = #{record.accountName,jdbcType=VARCHAR}");
		}
		if (record.getIsWinner() != null) {
			sql.SET("is_winner = #{record.isWinner,jdbcType=VARCHAR}");
		}
		if (record.getIsLucky() != null) {
			sql.SET("is_lucky = #{record.isLucky,jdbcType=VARCHAR}");
		}
		if (record.getTrxId() != null) {
			sql.SET("trx_id = #{record.trxId,jdbcType=VARCHAR}");
		}
		if (record.getTradeQty() != null) {
			sql.SET("trade_qty = #{record.tradeQty,jdbcType=DECIMAL}");
		}
		if (record.getTradeDate() != null) {
			sql.SET("trade_date = #{record.tradeDate,jdbcType=TIMESTAMP}");
		}
		if (record.getWinQty() != null) {
			sql.SET("win_qty = #{record.winQty,jdbcType=DECIMAL}");
		}
		if (record.getLuckyQty() != null) {
			sql.SET("lucky_qty = #{record.luckyQty,jdbcType=DECIMAL}");
		}
		if (record.getCreateDate() != null) {
			sql.SET("create_date = #{record.createDate,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateDate() != null) {
			sql.SET("update_date = #{record.updateDate,jdbcType=TIMESTAMP}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("activity_stage_user");
		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("activity_id = #{record.activityId,jdbcType=BIGINT}");
		sql.SET("activity_stage_id = #{record.activityStageId,jdbcType=BIGINT}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("account_name = #{record.accountName,jdbcType=VARCHAR}");
		sql.SET("is_winner = #{record.isWinner,jdbcType=VARCHAR}");
		sql.SET("is_lucky = #{record.isLucky,jdbcType=VARCHAR}");
		sql.SET("trx_id = #{record.trxId,jdbcType=VARCHAR}");
		sql.SET("trade_qty = #{record.tradeQty,jdbcType=DECIMAL}");
		sql.SET("trade_date = #{record.tradeDate,jdbcType=TIMESTAMP}");
		sql.SET("win_qty = #{record.winQty,jdbcType=DECIMAL}");
		sql.SET("lucky_qty = #{record.luckyQty,jdbcType=DECIMAL}");
		sql.SET("create_date = #{record.createDate,jdbcType=TIMESTAMP}");
		sql.SET("update_date = #{record.updateDate,jdbcType=TIMESTAMP}");
		ActivityStageUserExample example = (ActivityStageUserExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	public String updateByPrimaryKeySelective(ActivityStageUser record) {
		SQL sql = new SQL();
		sql.UPDATE("activity_stage_user");
		if (record.getActivityId() != null) {
			sql.SET("activity_id = #{activityId,jdbcType=BIGINT}");
		}
		if (record.getActivityStageId() != null) {
			sql.SET("activity_stage_id = #{activityStageId,jdbcType=BIGINT}");
		}
		if (record.getStatus() != null) {
			sql.SET("status = #{status,jdbcType=VARCHAR}");
		}
		if (record.getAccountName() != null) {
			sql.SET("account_name = #{accountName,jdbcType=VARCHAR}");
		}
		if (record.getIsWinner() != null) {
			sql.SET("is_winner = #{isWinner,jdbcType=VARCHAR}");
		}
		if (record.getIsLucky() != null) {
			sql.SET("is_lucky = #{isLucky,jdbcType=VARCHAR}");
		}
		if (record.getTrxId() != null) {
			sql.SET("trx_id = #{trxId,jdbcType=VARCHAR}");
		}
		if (record.getTradeQty() != null) {
			sql.SET("trade_qty = #{tradeQty,jdbcType=DECIMAL}");
		}
		if (record.getTradeDate() != null) {
			sql.SET("trade_date = #{tradeDate,jdbcType=TIMESTAMP}");
		}
		if (record.getWinQty() != null) {
			sql.SET("win_qty = #{winQty,jdbcType=DECIMAL}");
		}
		if (record.getLuckyQty() != null) {
			sql.SET("lucky_qty = #{luckyQty,jdbcType=DECIMAL}");
		}
		if (record.getCreateDate() != null) {
			sql.SET("create_date = #{createDate,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdateDate() != null) {
			sql.SET("update_date = #{updateDate,jdbcType=TIMESTAMP}");
		}
		sql.WHERE("id = #{id,jdbcType=BIGINT}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table activity_stage_user
	 * @mbg.generated  Fri Sep 21 16:17:12 CST 2018
	 */
	protected void applyWhere(SQL sql, ActivityStageUserExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
}