package it.etoken.component.eosblock.dao.mapper;

import it.etoken.base.model.eosblock.entity.EosAccountOrder;
import it.etoken.base.model.eosblock.entity.EosAccountOrderExample.Criteria;
import it.etoken.base.model.eosblock.entity.EosAccountOrderExample.Criterion;
import it.etoken.base.model.eosblock.entity.EosAccountOrderExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class EosAccountOrderSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String countByExample(EosAccountOrderExample example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("eos_account_order");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String deleteByExample(EosAccountOrderExample example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("eos_account_order");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String insertSelective(EosAccountOrder record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("eos_account_order");
		if (record.getId() != null) {
			sql.VALUES("id", "#{id,jdbcType=BIGINT}");
		}
		if (record.getOrderNo() != null) {
			sql.VALUES("order_no", "#{orderNo,jdbcType=VARCHAR}");
		}
		if (record.getStatus() != null) {
			sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
		}
		if (record.getAmount() != null) {
			sql.VALUES("amount", "#{amount,jdbcType=DECIMAL}");
		}
		if (record.getAccountName() != null) {
			sql.VALUES("account_name", "#{accountName,jdbcType=VARCHAR}");
		}
		if (record.getOwnerPublicKey() != null) {
			sql.VALUES("owner_public_key", "#{ownerPublicKey,jdbcType=VARCHAR}");
		}
		if (record.getActivePublicKey() != null) {
			sql.VALUES("active_public_key", "#{activePublicKey,jdbcType=VARCHAR}");
		}
		if (record.getIp() != null) {
			sql.VALUES("ip", "#{ip,jdbcType=VARCHAR}");
		}
		if (record.getTransactionId() != null) {
			sql.VALUES("transaction_id", "#{transactionId,jdbcType=VARCHAR}");
		}
		if (record.getNotifyDate() != null) {
			sql.VALUES("notify_date", "#{notifyDate,jdbcType=TIMESTAMP}");
		}
		if (record.getCreatedate() != null) {
			sql.VALUES("createdate", "#{createdate,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdatedate() != null) {
			sql.VALUES("updatedate", "#{updatedate,jdbcType=TIMESTAMP}");
		}
		if (record.getNotifyContent() != null) {
			sql.VALUES("notify_content", "#{notifyContent,jdbcType=LONGVARCHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String selectByExampleWithBLOBs(EosAccountOrderExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("order_no");
		sql.SELECT("status");
		sql.SELECT("amount");
		sql.SELECT("account_name");
		sql.SELECT("owner_public_key");
		sql.SELECT("active_public_key");
		sql.SELECT("ip");
		sql.SELECT("transaction_id");
		sql.SELECT("notify_date");
		sql.SELECT("createdate");
		sql.SELECT("updatedate");
		sql.SELECT("notify_content");
		sql.FROM("eos_account_order");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String selectByExample(EosAccountOrderExample example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("id");
		} else {
			sql.SELECT("id");
		}
		sql.SELECT("order_no");
		sql.SELECT("status");
		sql.SELECT("amount");
		sql.SELECT("account_name");
		sql.SELECT("owner_public_key");
		sql.SELECT("active_public_key");
		sql.SELECT("ip");
		sql.SELECT("transaction_id");
		sql.SELECT("notify_date");
		sql.SELECT("createdate");
		sql.SELECT("updatedate");
		sql.FROM("eos_account_order");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		EosAccountOrder record = (EosAccountOrder) parameter.get("record");
		EosAccountOrderExample example = (EosAccountOrderExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("eos_account_order");
		if (record.getId() != null) {
			sql.SET("id = #{record.id,jdbcType=BIGINT}");
		}
		if (record.getOrderNo() != null) {
			sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
		}
		if (record.getStatus() != null) {
			sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		}
		if (record.getAmount() != null) {
			sql.SET("amount = #{record.amount,jdbcType=DECIMAL}");
		}
		if (record.getAccountName() != null) {
			sql.SET("account_name = #{record.accountName,jdbcType=VARCHAR}");
		}
		if (record.getOwnerPublicKey() != null) {
			sql.SET("owner_public_key = #{record.ownerPublicKey,jdbcType=VARCHAR}");
		}
		if (record.getActivePublicKey() != null) {
			sql.SET("active_public_key = #{record.activePublicKey,jdbcType=VARCHAR}");
		}
		if (record.getIp() != null) {
			sql.SET("ip = #{record.ip,jdbcType=VARCHAR}");
		}
		if (record.getTransactionId() != null) {
			sql.SET("transaction_id = #{record.transactionId,jdbcType=VARCHAR}");
		}
		if (record.getNotifyDate() != null) {
			sql.SET("notify_date = #{record.notifyDate,jdbcType=TIMESTAMP}");
		}
		if (record.getCreatedate() != null) {
			sql.SET("createdate = #{record.createdate,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdatedate() != null) {
			sql.SET("updatedate = #{record.updatedate,jdbcType=TIMESTAMP}");
		}
		if (record.getNotifyContent() != null) {
			sql.SET("notify_content = #{record.notifyContent,jdbcType=LONGVARCHAR}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("eos_account_order");
		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("amount = #{record.amount,jdbcType=DECIMAL}");
		sql.SET("account_name = #{record.accountName,jdbcType=VARCHAR}");
		sql.SET("owner_public_key = #{record.ownerPublicKey,jdbcType=VARCHAR}");
		sql.SET("active_public_key = #{record.activePublicKey,jdbcType=VARCHAR}");
		sql.SET("ip = #{record.ip,jdbcType=VARCHAR}");
		sql.SET("transaction_id = #{record.transactionId,jdbcType=VARCHAR}");
		sql.SET("notify_date = #{record.notifyDate,jdbcType=TIMESTAMP}");
		sql.SET("createdate = #{record.createdate,jdbcType=TIMESTAMP}");
		sql.SET("updatedate = #{record.updatedate,jdbcType=TIMESTAMP}");
		sql.SET("notify_content = #{record.notifyContent,jdbcType=LONGVARCHAR}");
		EosAccountOrderExample example = (EosAccountOrderExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("eos_account_order");
		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("order_no = #{record.orderNo,jdbcType=VARCHAR}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("amount = #{record.amount,jdbcType=DECIMAL}");
		sql.SET("account_name = #{record.accountName,jdbcType=VARCHAR}");
		sql.SET("owner_public_key = #{record.ownerPublicKey,jdbcType=VARCHAR}");
		sql.SET("active_public_key = #{record.activePublicKey,jdbcType=VARCHAR}");
		sql.SET("ip = #{record.ip,jdbcType=VARCHAR}");
		sql.SET("transaction_id = #{record.transactionId,jdbcType=VARCHAR}");
		sql.SET("notify_date = #{record.notifyDate,jdbcType=TIMESTAMP}");
		sql.SET("createdate = #{record.createdate,jdbcType=TIMESTAMP}");
		sql.SET("updatedate = #{record.updatedate,jdbcType=TIMESTAMP}");
		EosAccountOrderExample example = (EosAccountOrderExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	public String updateByPrimaryKeySelective(EosAccountOrder record) {
		SQL sql = new SQL();
		sql.UPDATE("eos_account_order");
		if (record.getOrderNo() != null) {
			sql.SET("order_no = #{orderNo,jdbcType=VARCHAR}");
		}
		if (record.getStatus() != null) {
			sql.SET("status = #{status,jdbcType=VARCHAR}");
		}
		if (record.getAmount() != null) {
			sql.SET("amount = #{amount,jdbcType=DECIMAL}");
		}
		if (record.getAccountName() != null) {
			sql.SET("account_name = #{accountName,jdbcType=VARCHAR}");
		}
		if (record.getOwnerPublicKey() != null) {
			sql.SET("owner_public_key = #{ownerPublicKey,jdbcType=VARCHAR}");
		}
		if (record.getActivePublicKey() != null) {
			sql.SET("active_public_key = #{activePublicKey,jdbcType=VARCHAR}");
		}
		if (record.getIp() != null) {
			sql.SET("ip = #{ip,jdbcType=VARCHAR}");
		}
		if (record.getTransactionId() != null) {
			sql.SET("transaction_id = #{transactionId,jdbcType=VARCHAR}");
		}
		if (record.getNotifyDate() != null) {
			sql.SET("notify_date = #{notifyDate,jdbcType=TIMESTAMP}");
		}
		if (record.getCreatedate() != null) {
			sql.SET("createdate = #{createdate,jdbcType=TIMESTAMP}");
		}
		if (record.getUpdatedate() != null) {
			sql.SET("updatedate = #{updatedate,jdbcType=TIMESTAMP}");
		}
		if (record.getNotifyContent() != null) {
			sql.SET("notify_content = #{notifyContent,jdbcType=LONGVARCHAR}");
		}
		sql.WHERE("id = #{id,jdbcType=BIGINT}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table eos_account_order
	 * @mbg.generated  Thu Oct 11 09:49:31 CST 2018
	 */
	protected void applyWhere(SQL sql, EosAccountOrderExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
}